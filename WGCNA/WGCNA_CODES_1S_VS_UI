rm(list=ls())

#######__set___the___working___directory___#####################################
setwd("/Users/nirjharbhattacharyya/Downloads/Mary_Ann_Analysis_2nd_March_23/mRNA_NIMBLEGEN/1S_VS_UI/")

#######__read___the___metadata___###############################################
metadata <- read.table("metadata_1S_UI.txt", header=TRUE, sep = "\t", row.names=1)

#######__bind___the___call___files___to___a___matrix___#########################
callmatrix <- c()
rnames <- c()
for(n in rownames(metadata)){
  adata <- read.csv(n, sep = "\t", row.names=2)
  if(is.null(rnames)){
    rnames <- rownames(adata)
  }else{
    if(!all(rnames == rownames(adata))) stop("Different probe ordering on array")
  }
  callmatrix <- cbind(callmatrix, adata[,3])
}
rownames(callmatrix) <- rnames
colnames(callmatrix) <- rownames(metadata)


######################___box__plot___##################
boxplot(callmatrix)



##########___log2___and___quantile___normalisation___###########################
library(preprocessCore)

#Log2
callmatrix <- log2(callmatrix)
boxplot(callmatrix)

#Qnorm
callmatrix <- normalize.quantiles(callmatrix)
rownames(callmatrix) <- rnames; colnames(callmatrix) <- rownames(metadata)
boxplot(callmatrix)

#########################################
x<-callmatrix
head(x)
x<-as.data.frame(x)
head(x)
library(org.Hs.eg.db)
x$symbol<-mapIds(org.Hs.eg.db, keys =rownames(x), keytype="ACCNUM", column ="SYMBOL")
head(x)
dim(x)
x$names <- rownames(x)
head(x)
dim(x)
rownames(x) <- c()##remove the row names
head(x)
dim(x)
x<-x[,-22]##remove the row name column
head(x)
dim(x)

x<-aggregate(x = x[ , colnames(x) != "symbol"], by = list(x$symbol), FUN = mean)# Mean by group
head(x)
dim(x)
rownames(x)<-x$Group.1
x<-x[,-1]
head(x)
dim(x)
callmatrix<-x

#########################################


################___PCA____of____expression____matrix___#########################
# Raw data exploration
library(ggplot2)
library(ggrepel)
pca <- prcomp(t(callmatrix), scale = TRUE)
summary(pca)
#plot(pca$x[,1], pca$x[,2])
#text(pca$x[,1], pca$x[,2], labels=row.names(pca$x), pos=c(1,3,4,2), font=2)
x<-cbind(pca$x[,1], pca$x[,2])
x<-as.data.frame(x)
ggplot(x, aes(x=V1, y=V2,col=metadata$Group, label=rownames(x)))+geom_point()+geom_text_repel()+xlab("PC1")+ylab("PC2")


######batch correction my addition###___correction for person___################
library(sva)
combat_edata1 = ComBat(dat=callmatrix, batch=metadata$batch, mod=NULL, par.prior=TRUE, prior.plots=FALSE)
head(combat_edata1)
combat_edata1
class(combat_edata1)
pca_after_batch_correction_person <- prcomp(t(combat_edata1), scale = TRUE)
summary(pca_after_batch_correction_person)
#plot(pca_after_batch_correction_person$x[,1], pca_after_batch_correction_person$x[,2])
#text(pca_after_batch_correction_person$x[,1], pca_after_batch_correction_person$x[,2], labels=row.names(pca_after_batch_correction_person$x), pos=c(1,3,4,2), font=2)
pca_after_batch_correction_person_dataframe<-cbind(pca_after_batch_correction_person$x[,1], pca_after_batch_correction_person$x[,2])
class(pca_after_batch_correction_person_dataframe)
pca_after_batch_correction_person_dataframe<-as.data.frame(pca_after_batch_correction_person_dataframe)
ggplot(pca_after_batch_correction_person_dataframe, aes(x=V1, y=V2, col=metadata$Group, label=rownames(pca_after_batch_correction_person_dataframe)))+geom_point()+geom_text_repel()+xlab("PC1")+ylab("PC2")

################################################################################




##############______WGCNA___#####################
#Loading WGCNA
library(WGCNA)

#Setting string not as factor
options(stringsAsFactors = FALSE)
#Enable multithread
enableWGCNAThreads()
## Allowing parallel execution with up to 7 working processes.

#2. Preparing the Data
#Reading the raw data (rows are the sample and columns the genes)
expr_normalized <- combat_edata1
input_mat = t(expr_normalized)
input_mat[1:5,1:10]
allowWGCNAThreads()


powers = c(c(1:10), seq(from = 12, to = 20, by = 2))

# Call the network topology analysis function
sft = pickSoftThreshold(
  input_mat,             # <= Input data
  #blockSize = 30,
  powerVector = powers,
  verbose = 5
)


par(mfrow = c(1,2));
cex1 = 0.9;

plot(sft$fitIndices[, 1],
     -sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
     xlab = "Soft Threshold (power)",
     ylab = "Scale Free Topology Model Fit, signed R^2",
     main = paste("Scale independence")
)
text(sft$fitIndices[, 1],
     -sign(sft$fitIndices[, 3]) * sft$fitIndices[, 2],
     labels = powers, cex = cex1, col = "red"
)
abline(h = 0.90, col = "red")
plot(sft$fitIndices[, 1],
     sft$fitIndices[, 5],
     xlab = "Soft Threshold (power)",
     ylab = "Mean Connectivity",
     type = "n",
     main = paste("Mean connectivity")
)
text(sft$fitIndices[, 1],
     sft$fitIndices[, 5],
     labels = powers,
     cex = cex1, col = "red")

picked_power = 9
temp_cor <- cor       
cor <- WGCNA::cor         # Force it to use WGCNA cor function (fix a namespace conflict issue)
netwk <- blockwiseModules(input_mat,                # <= input here
                          
                          # == Adjacency Function ==
                          power = picked_power,                # <= power here
                          networkType = "signed",
                          
                          # == Tree and Block Options ==
                          deepSplit = 2,
                          pamRespectsDendro = F,
                          # detectCutHeight = 0.75,
                          minModuleSize = 30,
                          maxBlockSize = 4000,
                          
                          # == Module Adjustments ==
                          reassignThreshold = 0,
                          mergeCutHeight = 0.25,
                          
                          # == TOM == Archive the run results in TOM file (saves time)
                          saveTOMs = T,
                          saveTOMFileBase = "ER",
                          
                          # == Output Options
                          numericLabels = T,
                          verbose = 3)



cor <- temp_cor     # Return cor function to original namespace

# Convert labels to colors for plotting
mergedColors = labels2colors(netwk$colors)
# Plot the dendrogram and the module colors underneath
plotDendroAndColors(
  netwk$dendrograms[[1]],
  mergedColors[netwk$blockGenes[[1]]],
  "Module colors",
  dendroLabels = FALSE,
  hang = 0.03,
  addGuide = TRUE,
  guideHang = 0.05 )

netwk$colors[netwk$blockGenes[[1]]]
table(netwk$colors)

module_df <- data.frame(
  gene_id = names(netwk$colors),
  colors = labels2colors(netwk$colors)
)

module_df[1:5,]
library(readr)

write_delim(module_df,
            file = "gene_modules.txt",
            delim = "\t")

# Get Module Eigengenes per cluster
MEs0 <- moduleEigengenes(input_mat, mergedColors)$eigengenes

# Reorder modules so similar modules are next to each other
MEs0 <- orderMEs(MEs0)
module_order = names(MEs0) %>% gsub("ME","", .)

# Add treatment names
MEs0$treatment = row.names(MEs0)

# tidy & plot data
mME = MEs0 %>%
  pivot_longer(-treatment) %>%
  mutate(
    name = gsub("ME", "", name),
    name = factor(name, levels = module_order)
  )

mME %>% ggplot(., aes(x=treatment, y=name, fill=value)) +
  geom_tile() +
  theme_bw() +
  geom_text(aes(label = round(value, 2)), size = 3) + 
  scale_fill_gradient2(
    low = "blue",
    high = "red",
    mid = "white",
    midpoint = 0,
    limit = c(-1,1)) +
  theme(axis.text.x = element_text(angle=90)) +
  labs(title = "Module-trait Relationships", y = "Modules", fill="corr")



# pick out a few modules of interest here
modules_of_interest = c("green", "turquoise", "tan")

# Pull out list of genes in that module
submod = module_df %>%
  subset(colors %in% modules_of_interest)

row.names(module_df) = module_df$gene_id

# Get normalized expression for those genes
expr_normalized[1:5,1:10]



subexpr = expr_normalized[submod$gene_id,]

submod_df = data.frame(subexpr) %>%
  mutate(
    gene_id = row.names(.)
  ) %>%
  pivot_longer(-gene_id) %>%
  mutate(
    module = module_df[gene_id,]$colors
  )

submod_df %>% ggplot(., aes(x=name, y=value, group=gene_id)) +
  geom_line(aes(color = module),
            alpha = 0.2) +
  theme_bw() +
  theme(
    axis.text.x = element_text(angle = 90)
  ) +
  facet_grid(rows = vars(module)) +
  labs(x = "treatment",
       y = "normalized expression")


genes_of_interest = module_df %>%
  subset(colors %in% modules_of_interest)

expr_of_interest = expr_normalized[genes_of_interest$gene_id,]
expr_of_interest[1:5,1:5]


TOM = TOMsimilarityFromExpr(t(expr_of_interest),
                            power = picked_power)


row.names(TOM) = row.names(expr_of_interest)
colnames(TOM) = row.names(expr_of_interest)

edge_list = data.frame(TOM) %>%
  mutate(
    gene1 = row.names(.)
  ) %>%
  pivot_longer(-gene1) %>%
  dplyr::rename(gene2 = name, correlation = value) %>%
  unique() %>%
  subset(!(gene1==gene2)) %>%
  mutate(
    module1 = module_df[gene1,]$colors,
    module2 = module_df[gene2,]$colors
  )

head(edge_list)


write_delim(edge_list,
            file = "edgelist.tsv",
            delim = "\t")
















