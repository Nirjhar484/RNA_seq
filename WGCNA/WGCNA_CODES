rm(list=ls())

#######__set___the___working___directory___#####################################
setwd("C:/Users/Nirjhar/Downloads/Mary_Ann_Analysis_2nd_March_23/mRNA_NIMBLEGEN/1S_VS_UI")

#######__read___the___metadata___###############################################
metadata <- read.table("metadata_1S_UI.txt", header=TRUE, sep = "\t", row.names=1)

#######__bind___the___call___files___to___a___matrix___#########################
callmatrix <- c()
rnames <- c()
for(n in rownames(metadata)){
  adata <- read.csv(n, sep = "\t", row.names=2)
  if(is.null(rnames)){
    rnames <- rownames(adata)
  }else{
    if(!all(rnames == rownames(adata))) stop("Different probe ordering on array")
  }
  callmatrix <- cbind(callmatrix, adata[,3])
}
rownames(callmatrix) <- rnames
colnames(callmatrix) <- rownames(metadata)


######################___box__plot___##################
boxplot(callmatrix)



##########___log2___and___quantile___normalisation___###########################
library(preprocessCore)

#Log2
callmatrix <- log2(callmatrix)
boxplot(callmatrix)

#Qnorm
callmatrix <- normalize.quantiles(callmatrix)
rownames(callmatrix) <- rnames; colnames(callmatrix) <- rownames(metadata)
boxplot(callmatrix)

#########################################
x<-callmatrix
head(x)
x<-as.data.frame(x)
head(x)
library(org.Hs.eg.db)
x$symbol<-mapIds(org.Hs.eg.db, keys =rownames(x), keytype="ACCNUM", column ="SYMBOL")
head(x)
dim(x)
x$names <- rownames(x)
head(x)
dim(x)
rownames(x) <- c()##remove the row names
head(x)
dim(x)
x<-x[,-22]##remove the row name column
head(x)
dim(x)

x<-aggregate(x = x[ , colnames(x) != "symbol"], by = list(x$symbol), FUN = mean)# Mean by group
head(x)
dim(x)
rownames(x)<-x$Group.1
x<-x[,-1]
head(x)
dim(x)
callmatrix<-x

#########################################


################___PCA____of____expression____matrix___#########################
# Raw data exploration
library(ggplot2)
library(ggrepel)
pca <- prcomp(t(callmatrix), scale = TRUE)
summary(pca)
#plot(pca$x[,1], pca$x[,2])
#text(pca$x[,1], pca$x[,2], labels=row.names(pca$x), pos=c(1,3,4,2), font=2)
x<-cbind(pca$x[,1], pca$x[,2])
x<-as.data.frame(x)
ggplot(x, aes(x=V1, y=V2,col=metadata$Group, label=rownames(x)))+geom_point()+geom_text_repel()+xlab("PC1")+ylab("PC2")


######batch correction my addition###___correction for person___################
library(sva)
combat_edata1 = ComBat(dat=callmatrix, batch=metadata$batch, mod=NULL, par.prior=TRUE, prior.plots=FALSE)
head(combat_edata1)
combat_edata1
class(combat_edata1)
pca_after_batch_correction_person <- prcomp(t(combat_edata1), scale = TRUE)
summary(pca_after_batch_correction_person)
#plot(pca_after_batch_correction_person$x[,1], pca_after_batch_correction_person$x[,2])
#text(pca_after_batch_correction_person$x[,1], pca_after_batch_correction_person$x[,2], labels=row.names(pca_after_batch_correction_person$x), pos=c(1,3,4,2), font=2)
pca_after_batch_correction_person_dataframe<-cbind(pca_after_batch_correction_person$x[,1], pca_after_batch_correction_person$x[,2])
class(pca_after_batch_correction_person_dataframe)
pca_after_batch_correction_person_dataframe<-as.data.frame(pca_after_batch_correction_person_dataframe)
ggplot(pca_after_batch_correction_person_dataframe, aes(x=V1, y=V2, col=metadata$Group, label=rownames(pca_after_batch_correction_person_dataframe)))+geom_point()+geom_text_repel()+xlab("PC1")+ylab("PC2")

################################################################################




##############______WGCNA___#####################
#Loading WGCNA
library(WGCNA)

#Setting string not as factor
options(stringsAsFactors = FALSE)
#Enable multithread
enableWGCNAThreads()
## Allowing parallel execution with up to 7 working processes.

#2. Preparing the Data
#Reading the raw data (rows are the sample and columns the genes)
expr_normalized <- combat_edata1
input_mat = t(expr_normalized)
input_mat[1:5,1:10]
allowWGCNAThreads()
expression<-input_mat
#Group data in a dendogram to check outliers
sampleTree = hclust(dist(expression), method = "average")

#Plot a sample tree: Open the output in a 12:9 inchs size window
#dev.off()
#sizeGrWindow(12,9)

#If you want to save this plot in a pdf file, do not comment the line below:
#pdf(file = "/media/natalia/3C8E068E2A640DD5/WGCNA/Spodoptera/sampleClustering.pdf", width = 12, height = 9); 
par(cex = 0.6)
par(mar = c(0,4,2,0))
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5, 
     cex.axis = 1.5, cex.main = 2)

#Plot a line showing the cut-off
abline(h = 90, col = "red") 
#This value of 31000 was chosen based on my data, you need to check the best value to #your data

#Determine clusters below the line
#help("cutreeStatic")
clust = cutreeStatic(sampleTree, cutHeight = 31000, minSize = 10)
#table(clust)
#clust

#Cluster 1 contains the samples we want to keep.
keepSamples = (clust==1)
expression = expression[keepSamples, ]
#dim(expression0)
nGenes = ncol(expression)
nSamples = nrow(expression)

#Read phenotypic data
metadata <- read.table("metadata_FV1_UI_4h.txt", header=TRUE, sep = "\t")
traitData = metadata
#dim(traitData)
#names(traitData)
Samples = rownames(expression)
Samples
traitRows = match(Samples, traitData$File.Name)
datTraits = traitData[traitRows, -1]
datTraits
rownames(datTraits) = traitData[traitRows, 1]
collectGarbage()

#Regrouping samples
sampleTree2 = hclust(dist(expression), method = "average")
#Converting phenotypic characters in a color representation: white means low value, red means high value
#and gray missing value
traitColors = labels2colors(datTraits)

#Plot a sample dendogram with the colors below
plotDendroAndColors(sampleTree2, traitColors,
                    groupLabels = names(datTraits), 
                    main = "Sample dendrogram and trait heatmap")

#3. Creating the Network
#Plotting the results
#sizeGrWindow(9, 5)
powers = c(c(1:10), seq(from = 12, to = 20, by = 2))
sft = pickSoftThreshold(
  input_mat,             # <= Input data
  #blockSize = 30,
  powerVector = powers,
  verbose = 5
)
par(mfrow = c(1,2))
cex1 = 0.9

#Index the scale free topology adjust as a function of the power soft thresholding.
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
     xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
     main = paste("Scale independence"))
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
     labels=powers,cex=cex1,col="red")

#This line corresponds to use a cut-off R² of h
abline(h=0.90,col="red")

#Connectivity mean as a function of soft power thresholding
plot(sft$fitIndices[,1], sft$fitIndices[,5],
     xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
     main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")

#This line corresponds to use a cut-off R² of h
abline(h=0.90,col="red")

softPower = 9 #Chosen in the graphs before
adjacency = adjacency(expression, power = softPower, type = "unsigned") #Calculating the adjacency matrix
#help(adjacency )
#Transforming the adjacency matrix in a topological overlap
TOM = TOMsimilarity(adjacency) #Calculating the topological overlap matrix
dissTOM = 1-TOM ##Calculating the dissimilarity



###4. Grouping Genes in Modules

#Clustering the modules
#Calculating eigengenes
MEList = moduleEigengenes(expression, colors = dynamicColors)
MEs = MEList$eigengenes

#Calculating the module dissimilarity eigengenes
MEDiss = 1-cor(MEs)

#Clustering the eigengenes modules
METree = hclust(as.dist(MEDiss), method = "average")
#Plotting the result
#sizeGrWindow(7, 6)
plot(METree, main = "Clustering of module eigengenes",
     xlab = "", sub = "")


#Grouping the clusters from a cut-off
MEDissThres = 0.25
#Plotting a cut-off line
abline(h=MEDissThres, col = "red")

#Grouping module colors
mergedColors = merge$colors

#Eigengenes of new grouped modules
mergedMEs = merge$newMEs
#getwd()
#sizeGrWindow(12, 9)
#pdf(file = "/media/natalia/3C8E068E2A640DD5/WGCNA/Spodoptera/geneDendro-3.pdf", wi = 9, he = 6)
plotDendroAndColors(geneTree, cbind(dynamicColors, mergedColors),
                    c("Dynamic Tree Cut", "Merged dynamic"),
                    dendroLabels = FALSE, hang = 0.03,
                    addGuide = TRUE, guideHang = 0.05)

#dev.off()

#Renaming the module colors
moduleColors = mergedColors

#Building numeric labels corresponding to the colors
colorOrder = c("grey", standardColors(50))
moduleLabels = match(moduleColors, colorOrder)-1
MEs = mergedMEs
#dim(dissTOM)


#TOMplot(dissTOM , geneTree,dynamicColors, terrainColors=TRUE)

##5. Associating Modules and Phenotypes

#Relating modules to characteristics and identifying important genes
#Defining the number of genes and samples
nGenes = ncol(expression)
nSamples = nrow(expression)

#Recalculating MEs with label colors
MEs0 = moduleEigengenes(expression, moduleColors)$eigengenes
MEs = orderMEs(MEs0)
moduleTraitCor = cor(MEs, datTraits, use = "p")
moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples)

#sizeGrWindow(8,4)

#Displaying correlations and its p-values
textMatrix =  paste(signif(moduleTraitCor, 2), "\n(",
                    signif(moduleTraitPvalue, 1), ")", sep = "")
dim(textMatrix) = dim(moduleTraitCor)
par(mar = c(6, 8.5, 3, 3))

#Displaying the correlation values in a heatmap plot
labeledHeatmap(Matrix = moduleTraitCor,
               xLabels = names(datTraits),
               yLabels = names(MEs),
               ySymbols = names(MEs),
               colorLabels = FALSE,
               colors = blueWhiteRed(50),
               textMatrix = textMatrix,
               setStdMargins = FALSE,
               cex.text = 0.5,
               zlim = c(-1,1),
               main = paste("Module-trait relationships"))


#Defining the variable Peso10dias containing the column Peso10dias of datTrait
Peso10dias = as.data.frame(datTraits$Peso10dias)
names(Peso10dias) = "Peso10d"

#names (colors) of the modules
modNames = substring(names(MEs), 3)

geneModuleMembership = as.data.frame(cor(expression, MEs, use = "p"))
MMPvalue = as.data.frame(corPvalueStudent(as.matrix(geneModuleMembership), nSamples))

names(geneModuleMembership) = paste("MM", modNames, sep="")
names(MMPvalue) = paste("p.MM", modNames, sep="")

geneTraitSignificance = as.data.frame(cor(expression, Peso10dias, use = "p"))
GSPvalue = as.data.frame(corPvalueStudent(as.matrix(geneTraitSignificance), nSamples))

names(geneTraitSignificance) = paste("GS.", names(Peso10dias), sep="")
names(GSPvalue) = paste("p.GS.", names(Peso10dias), sep="")

module = "pink" #########################putting the color below the plot
column = match(module, modNames)
moduleGenes = moduleColors==module

#sizeGrWindow(7, 7)
par(mfrow = c(1,1))
verboseScatterplot(abs(geneModuleMembership[moduleGenes, column]),
                   abs(geneTraitSignificance[moduleGenes, 1]),
                   xlab = paste("Module Membership in", module, "module"),
                   ylab = "Gene significance for Peso 10 dias",
                   main = paste("Module membership vs. gene significance\n"),
                   cex.main = 1.2, cex.lab = 1.2, cex.axis = 1.2, col = module)


#Display the gene names inside the module
#colnames(expression0)[moduleColors=="pink"] 

#Identifying most important genes for one determined characteristic inside of the cluster
geneInfo0 = data.frame(EST = colnames(expression),
                       moduleColor = moduleColors,
                       geneTraitSignificance,
                       GSPvalue)


modOrder = order(-abs(cor(MEs, Peso10dias, use = "p")))
for (mod in 1:ncol(geneModuleMembership))
{
  oldNames = names(geneInfo0)
  geneInfo0 = data.frame(geneInfo0, geneModuleMembership[, modOrder[mod]], 
                         MMPvalue[, modOrder[mod]]);
  names(geneInfo0) = c(oldNames, paste("MM.", modNames[modOrder[mod]], sep=""),
                       paste("p.MM.", modNames[modOrder[mod]], sep=""))
}
geneOrder = order(geneInfo0$moduleColor, -abs(geneInfo0$GS.Peso10d))
geneInfo = geneInfo0[geneOrder, ]
#if you want to write the information in a csv file, just uncomment line below
write.csv(geneInfo, file = "geneInfo.csv")


#6. Saving the Analysis
#Exporting the network to a cytoscape format
#Recalculating topological overlap, if necessary
#TOM = TOMsimilarityFromExpr(expression0, power = 10);
#Select the modules
#modules = c("brown", "red"); #chose modules that u want to export
#Select the gene modules
genes = colnames(expression)

#if you want export specific colors, substitute the second modulecolors by above modules
inModule = is.finite(match(moduleColors, moduleColors))
modGenes = genes[inModule]

#Select the corresponding topologic overlap 
modTOM = TOM[inModule, inModule]
dimnames(modTOM) = list(modGenes, modGenes)
modTOMSignificantes = which(modTOM>0.4)
#####warnings()

#Organize the genes by importance inside the module
genes = colnames(expression)
#sum(is.na(genes))
#It must return 0.


#Create the dataframe since the beginning
geneInfo0 = data.frame(ESTs = genes,
                       moduleColor = moduleColors,
                       geneTraitSignificance,
                       GSPvalue)

#Order the modules by the significance by a character Ex: peso10days
modOrder = order(-abs(cor(MEs, Peso10dias, use = "p")))

#Add information of the members of the module in the chosen order
for (mod in 1:ncol(geneModuleMembership))
{
  oldNames = names(geneInfo0)
  geneInfo0 = data.frame(geneInfo0, geneModuleMembership[, modOrder[mod]], 
                         MMPvalue[, modOrder[mod]]);
  names(geneInfo0) = c(oldNames, paste("MM.", modNames[modOrder[mod]], sep=""),
                       paste("p.MM.", modNames[modOrder[mod]], sep=""))
}

#Order the genes of geneinfo variable first by the color of the module, then by geneTraitSignificance
geneOrder = order(geneInfo0$moduleColor, -abs(geneInfo0$GS.Peso10d))
geneInfo = geneInfo0[geneOrder, ]

#write the file with the ordered values
write.csv(geneInfo, file = "geneInfo.csv")

#Export the network in list files os n edges that cytoscape can read
cyt = exportNetworkToCytoscape(modTOM,
                               edgeFile = "CytoscapeEdgeFile.txt",
                               nodeFile = "CytoscapeNodeFile.txt",
                               weighted = TRUE,
                               threshold = 0.4,
                               nodeNames = modGenes,
                               nodeAttr = moduleColors[inModule])










