rm(list=ls())

#######__set___the___working___directory___#####################################
setwd("/Users/nirjharbhattacharyya/Downloads/Mary_Ann_Analysis_2nd_March_23/mRNA_NIMBLEGEN/8HR_FV1_UI/")

#######__read___the___metadata___###############################################
metadata <- read.table("metadata_FV1_UI_8h.txt", header=TRUE, sep = "\t", row.names=1)

#######__bind___the___call___files___to___a___matrix___#########################
callmatrix <- c()
rnames <- c()
for(n in rownames(metadata)){
  adata <- read.csv(n, sep = "\t", row.names=2)
  if(is.null(rnames)){
    rnames <- rownames(adata)
  }else{
    if(!all(rnames == rownames(adata))) stop("Different probe ordering on array")
  }
  callmatrix <- cbind(callmatrix, adata[,3])
}
rownames(callmatrix) <- rnames
colnames(callmatrix) <- rownames(metadata)


######################___box__plot___##################

#boxplot(callmatrix)
ggplot(stack(as.data.frame(callmatrix)), aes(x = ind, y = values)) +   geom_boxplot()


##########___log2___and___quantile___normalisation___###########################
library(preprocessCore)

#Log2
callmatrix <- log2(callmatrix)
#boxplot(callmatrix)
ggplot(stack(as.data.frame(callmatrix)), aes(x = ind, y = values)) +   geom_boxplot()

#Qnorm
callmatrix <- normalize.quantiles(callmatrix)
rownames(callmatrix) <- rnames; colnames(callmatrix) <- rownames(metadata)
#boxplot(callmatrix)
ggplot(stack(as.data.frame(callmatrix)), aes(x = ind, y = values)) +   geom_boxplot()

#########################################
x<-callmatrix
head(x)
x<-as.data.frame(x)
head(x)
library(org.Hs.eg.db)
x$symbol<-mapIds(org.Hs.eg.db, keys =rownames(x), keytype="ACCNUM", column ="SYMBOL")
head(x)
dim(x)
x$names <- rownames(x)
head(x)
dim(x)
rownames(x) <- c()##remove the row names
head(x)
dim(x)
x<-x[,-22]##remove the row name column
head(x)
dim(x)

x<-aggregate(x = x[ , colnames(x) != "symbol"], by = list(x$symbol), FUN = mean)# Mean by group
head(x)
dim(x)
rownames(x)<-x$Group.1
x<-x[,-1]
head(x)
dim(x)
str(x)
x<-x[,-11]
callmatrix<-x

#########################################


################___PCA____of____expression____matrix___#########################
# Raw data exploration
library(ggplot2)
library(ggrepel)
pca <- prcomp(t(callmatrix), scale = TRUE)
summary(pca)
#plot(pca$x[,1], pca$x[,2])
#text(pca$x[,1], pca$x[,2], labels=row.names(pca$x), pos=c(1,3,4,2), font=2)
x<-cbind(pca$x[,1], pca$x[,2])
x<-as.data.frame(x)
ggplot(x, aes(x=V1, y=V2,col=metadata$Group, label=rownames(x)))+geom_point()+geom_text_repel()+xlab("PC1")+ylab("PC2")


######batch correction my addition###___correction for person___################
library(sva)
combat_edata1 = ComBat(dat=callmatrix, batch=metadata$batch, mod=NULL, par.prior=TRUE, prior.plots=FALSE)
head(combat_edata1)
combat_edata1
class(combat_edata1)
pca_after_batch_correction_person <- prcomp(t(combat_edata1), scale = TRUE)
summary(pca_after_batch_correction_person)
#plot(pca_after_batch_correction_person$x[,1], pca_after_batch_correction_person$x[,2])
#text(pca_after_batch_correction_person$x[,1], pca_after_batch_correction_person$x[,2], labels=row.names(pca_after_batch_correction_person$x), pos=c(1,3,4,2), font=2)
pca_after_batch_correction_person_dataframe<-cbind(pca_after_batch_correction_person$x[,1], pca_after_batch_correction_person$x[,2])
class(pca_after_batch_correction_person_dataframe)
pca_after_batch_correction_person_dataframe<-as.data.frame(pca_after_batch_correction_person_dataframe)
ggplot(pca_after_batch_correction_person_dataframe, aes(x=V1, y=V2, col=metadata$Group, label=rownames(pca_after_batch_correction_person_dataframe)))+geom_point()+geom_text_repel()+xlab("PC1")+ylab("PC2")

################################################################################


######batch____correction____my____addition###___correction for time___#########

#####################____differential__expression__analysis_____################
library(limma)
design <- model.matrix(~0+metadata$Group)
design
fit <- lmFit(combat_edata1, design)
head(fit$coefficients)
colnames(design) <- c("sample_FV","UI")
fit <- lmFit(combat_edata1, design)
head(fit$coefficients)
contrasts <- makeContrasts(sample_FV - UI, levels=design)
fit2 <- contrasts.fit(fit, contrasts)
fit2 <- eBayes(fit2)
topTable(fit2)
################################################################################

###########____write____the___result____to___a__csv__file________###############
x<-topTable(fit2, number=Inf)
x

##################################__________NOT__DOING____THIS____#################################
###################################################################################################
###################################################################################################
################___convert__to___gene__symbol______################################################
######  library(org.Hs.eg.db)                                                                  ####
######  x$symbol<-mapIds(org.Hs.eg.db, keys =rownames(x), keytype="ACCNUM", column ="SYMBOL")  ####
######  x                                                                                      ####
#### __remove__duplicate__rows___#####                                                         ####
######  x <- x[order(x$symbol, -x$adj.P.Val),]                                                 ####
###### removing duplicates from the sorted sub column                                          ####
######  x <- x[!duplicated(x$symbol),]                                                         ####
######  x                                                                                      ####
###################################################################################################
###################################################################################################
###################################################################################################

write.csv(x, "FV1_UI_8h_UP_AND_DOWN_RESULTS_mrna.csv", sep=",")
library(EnhancedVolcano)
#EnhancedVolcano(x, lab = rownames(x),  y = 'adj.P.Val', x = 'logFC', pCutoff = 0.05,  FCcutoff = 1.5, xlim = c(-1.5, 1.5), ylim = c(0, 8), pointSize = 1,title = ' FV1 vs UI', col=c("#000000", "#F0E442", "#0072B2", "#D55E00"))

#########____filer__up__and___downregultated_genes__#####
x_up <- x[x$adj.P.Val<0.05 & x$logFC>=1.5,]
dim(x_up)
write.csv(x_up, "FV1_UI_8h_UPREGULATED_RESULTS_mrna.csv", sep=",")
x_down <- x[x$adj.P.Val<0.05 & x$logFC<=-1.5,]
dim(x_down)
write.csv(x_down, "FV1_UI_8h_DOWNREGULATED_RESULTS_mrna.csv", sep=",")
#########____some__modifications__on___volcao__plot___##########################
keyvals <- ifelse(
  x$logFC < -1.5 & x$adj.P.Val<0.05, 'royalblue',
  ifelse(x$logFC > 1.5 & x$adj.P.Val<0.05, 'gold',
         ifelse(x$logFC<1.5 & x$logFC>-1.5 & x$adj.P.Val>0.05, 'red',
                'black')))
names(keyvals)[keyvals == 'royalblue'] <- 'Downregulated'
names(keyvals)[keyvals == 'black'] <- 'Adjusted P values less than 0.05'
names(keyvals)[keyvals == 'red'] <- 'Nonsignificant'
names(keyvals)[keyvals == 'gold'] <- 'Upregulated'

EnhancedVolcano(x, lab = row.names(x),  y = 'adj.P.Val', x = 'logFC', pCutoff = 0.05,  FCcutoff = 1.5, xlim = c(-3.5, 3.5), ylim = c(0, 12), pointSize = 3,title = 'FV1_UI_8H', colCustom = keyvals)


################################################################################

########___ONTOLOGY___##########
##for upregulated genes
library("gprofiler2")
library(tidyr)
library(dplyr)
gostres_UP <- gost(query = row.names(x_up), 
                   organism = "hsapiens", ordered_query = FALSE, 
                   multi_query = FALSE, significant = TRUE, exclude_iea = FALSE, 
                   measure_underrepresentation = FALSE, evcodes = TRUE, 
                   user_threshold = 0.05, correction_method = "fdr", 
                   domain_scope = "annotated", custom_bg = NULL, 
                   numeric_ns = "", sources = NULL, as_short_link = FALSE)


onto_UP <- gostres_UP$result[,c("term_name", "p_value", "term_id", "source","precision", "intersection")]
write.csv(onto_UP, "FV1_UI_8h_ONTOLOGY_UPREGULATED.csv", sep=",")
#create separate datasets for BP,CC,MF and KEGG
##BP
BP_UP<-onto_UP[onto_UP$source=="GO:BP",]
BP_UP<-top_n(as.data.frame(BP_UP),-10,p_value)
head(BP_UP)
##cc
CC_UP<-onto_UP[onto_UP$source=="GO:CC",]
CC_UP<-top_n(as.data.frame(CC_UP),-10,p_value)
head(CC_UP)
##MF
MF_UP<-onto_UP[onto_UP$source=="GO:MF",]
MF_UP<-top_n(as.data.frame(MF_UP),-10,p_value)
head(MF_UP)
####__KEGG___##
KEGG_UP<-onto_UP[onto_UP$source=="KEGG",]
KEGG_UP<-top_n(as.data.frame(KEGG_UP),-10,p_value)
head(KEGG_UP)
#####MERGE THEM####
df_merge_BP_CC_UP<-merge(BP_UP,CC_UP,by=c("term_name", "p_value", "term_id", "source","precision", "intersection"), all.x=T, all.y=T)
df_merge_MF_KEGG_UP<-merge(MF_UP,KEGG_UP,by=c("source", "term_name", "p_value", "term_id", "precision", "intersection"), all.x=T, all.y=T)
df_merged_UP<-merge(df_merge_BP_CC_UP, df_merge_MF_KEGG_UP, by=c("source", "term_name", "p_value", "term_id", "precision","intersection"), all.x=T, all.y=T)
df_merged_UP$precision<-(df_merged_UP$precision)*5
df_merged_UP

#####Plot#########
ggplot(data = df_merged_UP) + geom_point(aes(x =  precision, y = term_name, color =precision , size = -log10(p_value), shape = as.factor(source))) + labs(y = "", x = " GeneRatio") +scale_color_gradient(low = c("red"), high = c("blue"), space = "Lab")+ theme_bw() + theme(panel.background = element_rect(fill="white"), text = element_text(size = 12,face = "plain",color = "black")) + theme(legend.text = element_text(colour = "black")) + theme(axis.text = element_text(colour = "black", face = "bold")) + theme(axis.title.x = element_text(face = "bold", size = 12)) + theme(axis.title.y = element_text(face = "bold", size = 12))

##############################################################################################


########___ONTOLOGY___##########
##for downregulated genes
library("gprofiler2")
library(tidyr)
library(dplyr)
gostres_DOWN <- gost(query = row.names(x_down), 
                     organism = "hsapiens", ordered_query = FALSE, 
                     multi_query = FALSE, significant = TRUE, exclude_iea = FALSE, 
                     measure_underrepresentation = FALSE, evcodes = TRUE, 
                     user_threshold = 0.05, correction_method = "fdr", 
                     domain_scope = "annotated", custom_bg = NULL, 
                     numeric_ns = "", sources = NULL, as_short_link = FALSE)


onto_DOWN <- gostres_DOWN$result[,c("term_name", "p_value", "term_id", "source","precision", "intersection")]
write.csv(onto_DOWN, "FV1_UI_8h_ONTOLOGY_DOWNREGULATED.csv", sep=",")
#create separate datasets for BP,CC,MF and KEGG
##BP
BP_DOWN<-onto_DOWN[onto_DOWN$source=="GO:BP",]
BP_DOWN<-top_n(as.data.frame(BP_DOWN),-10,p_value)
head(BP_DOWN)
##cc
CC_DOWN<-onto_DOWN[onto_DOWN$source=="GO:CC",]
CC_DOWN<-top_n(as.data.frame(CC_DOWN),-10,p_value)
head(CC_DOWN)
##MF
MF_DOWN<-onto_DOWN[onto_DOWN$source=="GO:MF",]
MF_DOWN<-top_n(as.data.frame(MF_DOWN),-10,p_value)
head(MF_DOWN)
####__KEGG___##
KEGG_DOWN<-onto_DOWN[onto_DOWN$source=="KEGG",]
KEGG_DOWN<-top_n(as.data.frame(KEGG_DOWN),-10,p_value)
head(KEGG_DOWN)
#####MERGE THEM####
df_merge_BP_CC_DOWN<-merge(BP_DOWN,CC_DOWN,by=c("term_name", "p_value", "term_id", "source","precision", "intersection"), all.x=T, all.y=T)
df_merge_MF_KEGG_DOWN<-merge(MF_DOWN,KEGG_DOWN,by=c("source", "term_name", "p_value", "term_id", "precision", "intersection"), all.x=T, all.y=T)
df_merged_DOWN<-merge(df_merge_BP_CC_DOWN, df_merge_MF_KEGG_DOWN, by=c("source", "term_name", "p_value", "term_id", "precision","intersection"), all.x=T, all.y=T)
df_merged_DOWN$precision<-(df_merged_DOWN$precision)*5
df_merged_DOWN

#####Plot#########
ggplot(data = df_merged_DOWN) + geom_point(aes(x =  precision, y = term_name, color =precision , size = -log10(p_value), shape = as.factor(source))) + labs(y = "", x = " GeneRatio") +scale_color_gradient(low = c("red"), high = c("blue"), space = "Lab")+ theme_bw() + theme(panel.background = element_rect(fill="white"), text = element_text(size = 12,face = "plain",color = "black")) + theme(legend.text = element_text(colour = "black")) + theme(axis.text = element_text(colour = "black", face = "bold")) + theme(axis.title.x = element_text(face = "bold", size = 12)) + theme(axis.title.y = element_text(face = "bold", size = 12))

